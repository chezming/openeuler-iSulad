// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: api.proto

#include "api.pb.h"
#include "api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace runtime {
namespace v1alpha2 {

static const char* RuntimeService_method_names[] = {
  "/runtime.v1alpha2.RuntimeService/Version",
  "/runtime.v1alpha2.RuntimeService/RunPodSandbox",
  "/runtime.v1alpha2.RuntimeService/StopPodSandbox",
  "/runtime.v1alpha2.RuntimeService/RemovePodSandbox",
  "/runtime.v1alpha2.RuntimeService/PodSandboxStatus",
  "/runtime.v1alpha2.RuntimeService/ListPodSandbox",
  "/runtime.v1alpha2.RuntimeService/CreateContainer",
  "/runtime.v1alpha2.RuntimeService/StartContainer",
  "/runtime.v1alpha2.RuntimeService/StopContainer",
  "/runtime.v1alpha2.RuntimeService/RemoveContainer",
  "/runtime.v1alpha2.RuntimeService/ListContainers",
  "/runtime.v1alpha2.RuntimeService/ContainerStatus",
  "/runtime.v1alpha2.RuntimeService/UpdateContainerResources",
  "/runtime.v1alpha2.RuntimeService/ReopenContainerLog",
  "/runtime.v1alpha2.RuntimeService/ExecSync",
  "/runtime.v1alpha2.RuntimeService/Exec",
  "/runtime.v1alpha2.RuntimeService/Attach",
  "/runtime.v1alpha2.RuntimeService/PortForward",
  "/runtime.v1alpha2.RuntimeService/ContainerStats",
  "/runtime.v1alpha2.RuntimeService/ListContainerStats",
  "/runtime.v1alpha2.RuntimeService/PodSandboxStats",
  "/runtime.v1alpha2.RuntimeService/ListPodSandboxStats",
  "/runtime.v1alpha2.RuntimeService/UpdateRuntimeConfig",
  "/runtime.v1alpha2.RuntimeService/Status",
};

std::unique_ptr< RuntimeService::Stub> RuntimeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RuntimeService::Stub> stub(new RuntimeService::Stub(channel, options));
  return stub;
}

RuntimeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Version_(RuntimeService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RunPodSandbox_(RuntimeService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopPodSandbox_(RuntimeService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemovePodSandbox_(RuntimeService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PodSandboxStatus_(RuntimeService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPodSandbox_(RuntimeService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateContainer_(RuntimeService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartContainer_(RuntimeService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopContainer_(RuntimeService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveContainer_(RuntimeService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListContainers_(RuntimeService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContainerStatus_(RuntimeService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateContainerResources_(RuntimeService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReopenContainerLog_(RuntimeService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExecSync_(RuntimeService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Exec_(RuntimeService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Attach_(RuntimeService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PortForward_(RuntimeService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContainerStats_(RuntimeService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListContainerStats_(RuntimeService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PodSandboxStats_(RuntimeService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPodSandboxStats_(RuntimeService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRuntimeConfig_(RuntimeService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(RuntimeService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RuntimeService::Stub::Version(::grpc::ClientContext* context, const ::runtime::v1alpha2::VersionRequest& request, ::runtime::v1alpha2::VersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::VersionRequest, ::runtime::v1alpha2::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Version_, context, request, response);
}

void RuntimeService::Stub::async::Version(::grpc::ClientContext* context, const ::runtime::v1alpha2::VersionRequest* request, ::runtime::v1alpha2::VersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::VersionRequest, ::runtime::v1alpha2::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::Version(::grpc::ClientContext* context, const ::runtime::v1alpha2::VersionRequest* request, ::runtime::v1alpha2::VersionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Version_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::VersionResponse>* RuntimeService::Stub::PrepareAsyncVersionRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::VersionResponse, ::runtime::v1alpha2::VersionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Version_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::VersionResponse>* RuntimeService::Stub::AsyncVersionRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::VersionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVersionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::RunPodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::RunPodSandboxRequest& request, ::runtime::v1alpha2::RunPodSandboxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::RunPodSandboxRequest, ::runtime::v1alpha2::RunPodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunPodSandbox_, context, request, response);
}

void RuntimeService::Stub::async::RunPodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::RunPodSandboxRequest* request, ::runtime::v1alpha2::RunPodSandboxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::RunPodSandboxRequest, ::runtime::v1alpha2::RunPodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunPodSandbox_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::RunPodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::RunPodSandboxRequest* request, ::runtime::v1alpha2::RunPodSandboxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunPodSandbox_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::RunPodSandboxResponse>* RuntimeService::Stub::PrepareAsyncRunPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::RunPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::RunPodSandboxResponse, ::runtime::v1alpha2::RunPodSandboxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunPodSandbox_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::RunPodSandboxResponse>* RuntimeService::Stub::AsyncRunPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::RunPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunPodSandboxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::StopPodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::StopPodSandboxRequest& request, ::runtime::v1alpha2::StopPodSandboxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::StopPodSandboxRequest, ::runtime::v1alpha2::StopPodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopPodSandbox_, context, request, response);
}

void RuntimeService::Stub::async::StopPodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::StopPodSandboxRequest* request, ::runtime::v1alpha2::StopPodSandboxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::StopPodSandboxRequest, ::runtime::v1alpha2::StopPodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPodSandbox_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::StopPodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::StopPodSandboxRequest* request, ::runtime::v1alpha2::StopPodSandboxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPodSandbox_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::StopPodSandboxResponse>* RuntimeService::Stub::PrepareAsyncStopPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::StopPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::StopPodSandboxResponse, ::runtime::v1alpha2::StopPodSandboxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopPodSandbox_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::StopPodSandboxResponse>* RuntimeService::Stub::AsyncStopPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::StopPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopPodSandboxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::RemovePodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemovePodSandboxRequest& request, ::runtime::v1alpha2::RemovePodSandboxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::RemovePodSandboxRequest, ::runtime::v1alpha2::RemovePodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemovePodSandbox_, context, request, response);
}

void RuntimeService::Stub::async::RemovePodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemovePodSandboxRequest* request, ::runtime::v1alpha2::RemovePodSandboxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::RemovePodSandboxRequest, ::runtime::v1alpha2::RemovePodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePodSandbox_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::RemovePodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemovePodSandboxRequest* request, ::runtime::v1alpha2::RemovePodSandboxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemovePodSandbox_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::RemovePodSandboxResponse>* RuntimeService::Stub::PrepareAsyncRemovePodSandboxRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemovePodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::RemovePodSandboxResponse, ::runtime::v1alpha2::RemovePodSandboxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemovePodSandbox_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::RemovePodSandboxResponse>* RuntimeService::Stub::AsyncRemovePodSandboxRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemovePodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemovePodSandboxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::PodSandboxStatus(::grpc::ClientContext* context, const ::runtime::v1alpha2::PodSandboxStatusRequest& request, ::runtime::v1alpha2::PodSandboxStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::PodSandboxStatusRequest, ::runtime::v1alpha2::PodSandboxStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PodSandboxStatus_, context, request, response);
}

void RuntimeService::Stub::async::PodSandboxStatus(::grpc::ClientContext* context, const ::runtime::v1alpha2::PodSandboxStatusRequest* request, ::runtime::v1alpha2::PodSandboxStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::PodSandboxStatusRequest, ::runtime::v1alpha2::PodSandboxStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PodSandboxStatus_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::PodSandboxStatus(::grpc::ClientContext* context, const ::runtime::v1alpha2::PodSandboxStatusRequest* request, ::runtime::v1alpha2::PodSandboxStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PodSandboxStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::PodSandboxStatusResponse>* RuntimeService::Stub::PrepareAsyncPodSandboxStatusRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::PodSandboxStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::PodSandboxStatusResponse, ::runtime::v1alpha2::PodSandboxStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PodSandboxStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::PodSandboxStatusResponse>* RuntimeService::Stub::AsyncPodSandboxStatusRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::PodSandboxStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPodSandboxStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::ListPodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListPodSandboxRequest& request, ::runtime::v1alpha2::ListPodSandboxResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ListPodSandboxRequest, ::runtime::v1alpha2::ListPodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListPodSandbox_, context, request, response);
}

void RuntimeService::Stub::async::ListPodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListPodSandboxRequest* request, ::runtime::v1alpha2::ListPodSandboxResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ListPodSandboxRequest, ::runtime::v1alpha2::ListPodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPodSandbox_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::ListPodSandbox(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListPodSandboxRequest* request, ::runtime::v1alpha2::ListPodSandboxResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPodSandbox_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ListPodSandboxResponse>* RuntimeService::Stub::PrepareAsyncListPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ListPodSandboxResponse, ::runtime::v1alpha2::ListPodSandboxRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListPodSandbox_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ListPodSandboxResponse>* RuntimeService::Stub::AsyncListPodSandboxRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListPodSandboxRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListPodSandboxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::CreateContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::CreateContainerRequest& request, ::runtime::v1alpha2::CreateContainerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::CreateContainerRequest, ::runtime::v1alpha2::CreateContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateContainer_, context, request, response);
}

void RuntimeService::Stub::async::CreateContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::CreateContainerRequest* request, ::runtime::v1alpha2::CreateContainerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::CreateContainerRequest, ::runtime::v1alpha2::CreateContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateContainer_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::CreateContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::CreateContainerRequest* request, ::runtime::v1alpha2::CreateContainerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateContainer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::CreateContainerResponse>* RuntimeService::Stub::PrepareAsyncCreateContainerRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::CreateContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::CreateContainerResponse, ::runtime::v1alpha2::CreateContainerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateContainer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::CreateContainerResponse>* RuntimeService::Stub::AsyncCreateContainerRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::CreateContainerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateContainerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::StartContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::StartContainerRequest& request, ::runtime::v1alpha2::StartContainerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::StartContainerRequest, ::runtime::v1alpha2::StartContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartContainer_, context, request, response);
}

void RuntimeService::Stub::async::StartContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::StartContainerRequest* request, ::runtime::v1alpha2::StartContainerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::StartContainerRequest, ::runtime::v1alpha2::StartContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartContainer_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::StartContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::StartContainerRequest* request, ::runtime::v1alpha2::StartContainerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartContainer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::StartContainerResponse>* RuntimeService::Stub::PrepareAsyncStartContainerRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::StartContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::StartContainerResponse, ::runtime::v1alpha2::StartContainerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartContainer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::StartContainerResponse>* RuntimeService::Stub::AsyncStartContainerRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::StartContainerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartContainerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::StopContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::StopContainerRequest& request, ::runtime::v1alpha2::StopContainerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::StopContainerRequest, ::runtime::v1alpha2::StopContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopContainer_, context, request, response);
}

void RuntimeService::Stub::async::StopContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::StopContainerRequest* request, ::runtime::v1alpha2::StopContainerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::StopContainerRequest, ::runtime::v1alpha2::StopContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopContainer_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::StopContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::StopContainerRequest* request, ::runtime::v1alpha2::StopContainerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopContainer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::StopContainerResponse>* RuntimeService::Stub::PrepareAsyncStopContainerRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::StopContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::StopContainerResponse, ::runtime::v1alpha2::StopContainerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopContainer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::StopContainerResponse>* RuntimeService::Stub::AsyncStopContainerRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::StopContainerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopContainerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::RemoveContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemoveContainerRequest& request, ::runtime::v1alpha2::RemoveContainerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::RemoveContainerRequest, ::runtime::v1alpha2::RemoveContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveContainer_, context, request, response);
}

void RuntimeService::Stub::async::RemoveContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemoveContainerRequest* request, ::runtime::v1alpha2::RemoveContainerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::RemoveContainerRequest, ::runtime::v1alpha2::RemoveContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveContainer_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::RemoveContainer(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemoveContainerRequest* request, ::runtime::v1alpha2::RemoveContainerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveContainer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::RemoveContainerResponse>* RuntimeService::Stub::PrepareAsyncRemoveContainerRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemoveContainerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::RemoveContainerResponse, ::runtime::v1alpha2::RemoveContainerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveContainer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::RemoveContainerResponse>* RuntimeService::Stub::AsyncRemoveContainerRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemoveContainerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveContainerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::ListContainers(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListContainersRequest& request, ::runtime::v1alpha2::ListContainersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ListContainersRequest, ::runtime::v1alpha2::ListContainersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListContainers_, context, request, response);
}

void RuntimeService::Stub::async::ListContainers(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListContainersRequest* request, ::runtime::v1alpha2::ListContainersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ListContainersRequest, ::runtime::v1alpha2::ListContainersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListContainers_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::ListContainers(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListContainersRequest* request, ::runtime::v1alpha2::ListContainersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListContainers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ListContainersResponse>* RuntimeService::Stub::PrepareAsyncListContainersRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListContainersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ListContainersResponse, ::runtime::v1alpha2::ListContainersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListContainers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ListContainersResponse>* RuntimeService::Stub::AsyncListContainersRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListContainersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListContainersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::ContainerStatus(::grpc::ClientContext* context, const ::runtime::v1alpha2::ContainerStatusRequest& request, ::runtime::v1alpha2::ContainerStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ContainerStatusRequest, ::runtime::v1alpha2::ContainerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ContainerStatus_, context, request, response);
}

void RuntimeService::Stub::async::ContainerStatus(::grpc::ClientContext* context, const ::runtime::v1alpha2::ContainerStatusRequest* request, ::runtime::v1alpha2::ContainerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ContainerStatusRequest, ::runtime::v1alpha2::ContainerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContainerStatus_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::ContainerStatus(::grpc::ClientContext* context, const ::runtime::v1alpha2::ContainerStatusRequest* request, ::runtime::v1alpha2::ContainerStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContainerStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ContainerStatusResponse>* RuntimeService::Stub::PrepareAsyncContainerStatusRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ContainerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ContainerStatusResponse, ::runtime::v1alpha2::ContainerStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ContainerStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ContainerStatusResponse>* RuntimeService::Stub::AsyncContainerStatusRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ContainerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContainerStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::UpdateContainerResources(::grpc::ClientContext* context, const ::runtime::v1alpha2::UpdateContainerResourcesRequest& request, ::runtime::v1alpha2::UpdateContainerResourcesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::UpdateContainerResourcesRequest, ::runtime::v1alpha2::UpdateContainerResourcesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateContainerResources_, context, request, response);
}

void RuntimeService::Stub::async::UpdateContainerResources(::grpc::ClientContext* context, const ::runtime::v1alpha2::UpdateContainerResourcesRequest* request, ::runtime::v1alpha2::UpdateContainerResourcesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::UpdateContainerResourcesRequest, ::runtime::v1alpha2::UpdateContainerResourcesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateContainerResources_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::UpdateContainerResources(::grpc::ClientContext* context, const ::runtime::v1alpha2::UpdateContainerResourcesRequest* request, ::runtime::v1alpha2::UpdateContainerResourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateContainerResources_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::UpdateContainerResourcesResponse>* RuntimeService::Stub::PrepareAsyncUpdateContainerResourcesRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::UpdateContainerResourcesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::UpdateContainerResourcesResponse, ::runtime::v1alpha2::UpdateContainerResourcesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateContainerResources_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::UpdateContainerResourcesResponse>* RuntimeService::Stub::AsyncUpdateContainerResourcesRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::UpdateContainerResourcesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateContainerResourcesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::ReopenContainerLog(::grpc::ClientContext* context, const ::runtime::v1alpha2::ReopenContainerLogRequest& request, ::runtime::v1alpha2::ReopenContainerLogResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ReopenContainerLogRequest, ::runtime::v1alpha2::ReopenContainerLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReopenContainerLog_, context, request, response);
}

void RuntimeService::Stub::async::ReopenContainerLog(::grpc::ClientContext* context, const ::runtime::v1alpha2::ReopenContainerLogRequest* request, ::runtime::v1alpha2::ReopenContainerLogResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ReopenContainerLogRequest, ::runtime::v1alpha2::ReopenContainerLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReopenContainerLog_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::ReopenContainerLog(::grpc::ClientContext* context, const ::runtime::v1alpha2::ReopenContainerLogRequest* request, ::runtime::v1alpha2::ReopenContainerLogResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReopenContainerLog_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ReopenContainerLogResponse>* RuntimeService::Stub::PrepareAsyncReopenContainerLogRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ReopenContainerLogRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ReopenContainerLogResponse, ::runtime::v1alpha2::ReopenContainerLogRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReopenContainerLog_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ReopenContainerLogResponse>* RuntimeService::Stub::AsyncReopenContainerLogRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ReopenContainerLogRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReopenContainerLogRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::ExecSync(::grpc::ClientContext* context, const ::runtime::v1alpha2::ExecSyncRequest& request, ::runtime::v1alpha2::ExecSyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ExecSyncRequest, ::runtime::v1alpha2::ExecSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ExecSync_, context, request, response);
}

void RuntimeService::Stub::async::ExecSync(::grpc::ClientContext* context, const ::runtime::v1alpha2::ExecSyncRequest* request, ::runtime::v1alpha2::ExecSyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ExecSyncRequest, ::runtime::v1alpha2::ExecSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecSync_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::ExecSync(::grpc::ClientContext* context, const ::runtime::v1alpha2::ExecSyncRequest* request, ::runtime::v1alpha2::ExecSyncResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ExecSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ExecSyncResponse>* RuntimeService::Stub::PrepareAsyncExecSyncRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ExecSyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ExecSyncResponse, ::runtime::v1alpha2::ExecSyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ExecSync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ExecSyncResponse>* RuntimeService::Stub::AsyncExecSyncRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ExecSyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::Exec(::grpc::ClientContext* context, const ::runtime::v1alpha2::ExecRequest& request, ::runtime::v1alpha2::ExecResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ExecRequest, ::runtime::v1alpha2::ExecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exec_, context, request, response);
}

void RuntimeService::Stub::async::Exec(::grpc::ClientContext* context, const ::runtime::v1alpha2::ExecRequest* request, ::runtime::v1alpha2::ExecResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ExecRequest, ::runtime::v1alpha2::ExecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::Exec(::grpc::ClientContext* context, const ::runtime::v1alpha2::ExecRequest* request, ::runtime::v1alpha2::ExecResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exec_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ExecResponse>* RuntimeService::Stub::PrepareAsyncExecRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ExecRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ExecResponse, ::runtime::v1alpha2::ExecRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exec_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ExecResponse>* RuntimeService::Stub::AsyncExecRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ExecRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExecRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::Attach(::grpc::ClientContext* context, const ::runtime::v1alpha2::AttachRequest& request, ::runtime::v1alpha2::AttachResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::AttachRequest, ::runtime::v1alpha2::AttachResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Attach_, context, request, response);
}

void RuntimeService::Stub::async::Attach(::grpc::ClientContext* context, const ::runtime::v1alpha2::AttachRequest* request, ::runtime::v1alpha2::AttachResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::AttachRequest, ::runtime::v1alpha2::AttachResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Attach_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::Attach(::grpc::ClientContext* context, const ::runtime::v1alpha2::AttachRequest* request, ::runtime::v1alpha2::AttachResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Attach_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::AttachResponse>* RuntimeService::Stub::PrepareAsyncAttachRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::AttachRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::AttachResponse, ::runtime::v1alpha2::AttachRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Attach_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::AttachResponse>* RuntimeService::Stub::AsyncAttachRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::AttachRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAttachRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::PortForward(::grpc::ClientContext* context, const ::runtime::v1alpha2::PortForwardRequest& request, ::runtime::v1alpha2::PortForwardResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::PortForwardRequest, ::runtime::v1alpha2::PortForwardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PortForward_, context, request, response);
}

void RuntimeService::Stub::async::PortForward(::grpc::ClientContext* context, const ::runtime::v1alpha2::PortForwardRequest* request, ::runtime::v1alpha2::PortForwardResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::PortForwardRequest, ::runtime::v1alpha2::PortForwardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PortForward_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::PortForward(::grpc::ClientContext* context, const ::runtime::v1alpha2::PortForwardRequest* request, ::runtime::v1alpha2::PortForwardResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PortForward_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::PortForwardResponse>* RuntimeService::Stub::PrepareAsyncPortForwardRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::PortForwardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::PortForwardResponse, ::runtime::v1alpha2::PortForwardRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PortForward_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::PortForwardResponse>* RuntimeService::Stub::AsyncPortForwardRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::PortForwardRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPortForwardRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::ContainerStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::ContainerStatsRequest& request, ::runtime::v1alpha2::ContainerStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ContainerStatsRequest, ::runtime::v1alpha2::ContainerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ContainerStats_, context, request, response);
}

void RuntimeService::Stub::async::ContainerStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::ContainerStatsRequest* request, ::runtime::v1alpha2::ContainerStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ContainerStatsRequest, ::runtime::v1alpha2::ContainerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContainerStats_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::ContainerStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::ContainerStatsRequest* request, ::runtime::v1alpha2::ContainerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContainerStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ContainerStatsResponse>* RuntimeService::Stub::PrepareAsyncContainerStatsRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ContainerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ContainerStatsResponse, ::runtime::v1alpha2::ContainerStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ContainerStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ContainerStatsResponse>* RuntimeService::Stub::AsyncContainerStatsRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ContainerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContainerStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::ListContainerStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListContainerStatsRequest& request, ::runtime::v1alpha2::ListContainerStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ListContainerStatsRequest, ::runtime::v1alpha2::ListContainerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListContainerStats_, context, request, response);
}

void RuntimeService::Stub::async::ListContainerStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListContainerStatsRequest* request, ::runtime::v1alpha2::ListContainerStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ListContainerStatsRequest, ::runtime::v1alpha2::ListContainerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListContainerStats_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::ListContainerStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListContainerStatsRequest* request, ::runtime::v1alpha2::ListContainerStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListContainerStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ListContainerStatsResponse>* RuntimeService::Stub::PrepareAsyncListContainerStatsRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListContainerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ListContainerStatsResponse, ::runtime::v1alpha2::ListContainerStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListContainerStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ListContainerStatsResponse>* RuntimeService::Stub::AsyncListContainerStatsRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListContainerStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListContainerStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::PodSandboxStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::PodSandboxStatsRequest& request, ::runtime::v1alpha2::PodSandboxStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::PodSandboxStatsRequest, ::runtime::v1alpha2::PodSandboxStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PodSandboxStats_, context, request, response);
}

void RuntimeService::Stub::async::PodSandboxStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::PodSandboxStatsRequest* request, ::runtime::v1alpha2::PodSandboxStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::PodSandboxStatsRequest, ::runtime::v1alpha2::PodSandboxStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PodSandboxStats_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::PodSandboxStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::PodSandboxStatsRequest* request, ::runtime::v1alpha2::PodSandboxStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PodSandboxStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::PodSandboxStatsResponse>* RuntimeService::Stub::PrepareAsyncPodSandboxStatsRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::PodSandboxStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::PodSandboxStatsResponse, ::runtime::v1alpha2::PodSandboxStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PodSandboxStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::PodSandboxStatsResponse>* RuntimeService::Stub::AsyncPodSandboxStatsRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::PodSandboxStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPodSandboxStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::ListPodSandboxStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListPodSandboxStatsRequest& request, ::runtime::v1alpha2::ListPodSandboxStatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ListPodSandboxStatsRequest, ::runtime::v1alpha2::ListPodSandboxStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListPodSandboxStats_, context, request, response);
}

void RuntimeService::Stub::async::ListPodSandboxStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListPodSandboxStatsRequest* request, ::runtime::v1alpha2::ListPodSandboxStatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ListPodSandboxStatsRequest, ::runtime::v1alpha2::ListPodSandboxStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPodSandboxStats_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::ListPodSandboxStats(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListPodSandboxStatsRequest* request, ::runtime::v1alpha2::ListPodSandboxStatsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListPodSandboxStats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ListPodSandboxStatsResponse>* RuntimeService::Stub::PrepareAsyncListPodSandboxStatsRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListPodSandboxStatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ListPodSandboxStatsResponse, ::runtime::v1alpha2::ListPodSandboxStatsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListPodSandboxStats_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ListPodSandboxStatsResponse>* RuntimeService::Stub::AsyncListPodSandboxStatsRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListPodSandboxStatsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListPodSandboxStatsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::UpdateRuntimeConfig(::grpc::ClientContext* context, const ::runtime::v1alpha2::UpdateRuntimeConfigRequest& request, ::runtime::v1alpha2::UpdateRuntimeConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::UpdateRuntimeConfigRequest, ::runtime::v1alpha2::UpdateRuntimeConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRuntimeConfig_, context, request, response);
}

void RuntimeService::Stub::async::UpdateRuntimeConfig(::grpc::ClientContext* context, const ::runtime::v1alpha2::UpdateRuntimeConfigRequest* request, ::runtime::v1alpha2::UpdateRuntimeConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::UpdateRuntimeConfigRequest, ::runtime::v1alpha2::UpdateRuntimeConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRuntimeConfig_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::UpdateRuntimeConfig(::grpc::ClientContext* context, const ::runtime::v1alpha2::UpdateRuntimeConfigRequest* request, ::runtime::v1alpha2::UpdateRuntimeConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRuntimeConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::UpdateRuntimeConfigResponse>* RuntimeService::Stub::PrepareAsyncUpdateRuntimeConfigRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::UpdateRuntimeConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::UpdateRuntimeConfigResponse, ::runtime::v1alpha2::UpdateRuntimeConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRuntimeConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::UpdateRuntimeConfigResponse>* RuntimeService::Stub::AsyncUpdateRuntimeConfigRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::UpdateRuntimeConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRuntimeConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RuntimeService::Stub::Status(::grpc::ClientContext* context, const ::runtime::v1alpha2::StatusRequest& request, ::runtime::v1alpha2::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::StatusRequest, ::runtime::v1alpha2::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void RuntimeService::Stub::async::Status(::grpc::ClientContext* context, const ::runtime::v1alpha2::StatusRequest* request, ::runtime::v1alpha2::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::StatusRequest, ::runtime::v1alpha2::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void RuntimeService::Stub::async::Status(::grpc::ClientContext* context, const ::runtime::v1alpha2::StatusRequest* request, ::runtime::v1alpha2::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::StatusResponse>* RuntimeService::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::StatusResponse, ::runtime::v1alpha2::StatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::StatusResponse>* RuntimeService::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

RuntimeService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::VersionRequest, ::runtime::v1alpha2::VersionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::VersionRequest* req,
             ::runtime::v1alpha2::VersionResponse* resp) {
               return service->Version(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::RunPodSandboxRequest, ::runtime::v1alpha2::RunPodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::RunPodSandboxRequest* req,
             ::runtime::v1alpha2::RunPodSandboxResponse* resp) {
               return service->RunPodSandbox(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::StopPodSandboxRequest, ::runtime::v1alpha2::StopPodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::StopPodSandboxRequest* req,
             ::runtime::v1alpha2::StopPodSandboxResponse* resp) {
               return service->StopPodSandbox(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::RemovePodSandboxRequest, ::runtime::v1alpha2::RemovePodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::RemovePodSandboxRequest* req,
             ::runtime::v1alpha2::RemovePodSandboxResponse* resp) {
               return service->RemovePodSandbox(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::PodSandboxStatusRequest, ::runtime::v1alpha2::PodSandboxStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::PodSandboxStatusRequest* req,
             ::runtime::v1alpha2::PodSandboxStatusResponse* resp) {
               return service->PodSandboxStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::ListPodSandboxRequest, ::runtime::v1alpha2::ListPodSandboxResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ListPodSandboxRequest* req,
             ::runtime::v1alpha2::ListPodSandboxResponse* resp) {
               return service->ListPodSandbox(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::CreateContainerRequest, ::runtime::v1alpha2::CreateContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::CreateContainerRequest* req,
             ::runtime::v1alpha2::CreateContainerResponse* resp) {
               return service->CreateContainer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::StartContainerRequest, ::runtime::v1alpha2::StartContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::StartContainerRequest* req,
             ::runtime::v1alpha2::StartContainerResponse* resp) {
               return service->StartContainer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::StopContainerRequest, ::runtime::v1alpha2::StopContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::StopContainerRequest* req,
             ::runtime::v1alpha2::StopContainerResponse* resp) {
               return service->StopContainer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::RemoveContainerRequest, ::runtime::v1alpha2::RemoveContainerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::RemoveContainerRequest* req,
             ::runtime::v1alpha2::RemoveContainerResponse* resp) {
               return service->RemoveContainer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::ListContainersRequest, ::runtime::v1alpha2::ListContainersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ListContainersRequest* req,
             ::runtime::v1alpha2::ListContainersResponse* resp) {
               return service->ListContainers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::ContainerStatusRequest, ::runtime::v1alpha2::ContainerStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ContainerStatusRequest* req,
             ::runtime::v1alpha2::ContainerStatusResponse* resp) {
               return service->ContainerStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::UpdateContainerResourcesRequest, ::runtime::v1alpha2::UpdateContainerResourcesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::UpdateContainerResourcesRequest* req,
             ::runtime::v1alpha2::UpdateContainerResourcesResponse* resp) {
               return service->UpdateContainerResources(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::ReopenContainerLogRequest, ::runtime::v1alpha2::ReopenContainerLogResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ReopenContainerLogRequest* req,
             ::runtime::v1alpha2::ReopenContainerLogResponse* resp) {
               return service->ReopenContainerLog(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::ExecSyncRequest, ::runtime::v1alpha2::ExecSyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ExecSyncRequest* req,
             ::runtime::v1alpha2::ExecSyncResponse* resp) {
               return service->ExecSync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::ExecRequest, ::runtime::v1alpha2::ExecResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ExecRequest* req,
             ::runtime::v1alpha2::ExecResponse* resp) {
               return service->Exec(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::AttachRequest, ::runtime::v1alpha2::AttachResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::AttachRequest* req,
             ::runtime::v1alpha2::AttachResponse* resp) {
               return service->Attach(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::PortForwardRequest, ::runtime::v1alpha2::PortForwardResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::PortForwardRequest* req,
             ::runtime::v1alpha2::PortForwardResponse* resp) {
               return service->PortForward(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::ContainerStatsRequest, ::runtime::v1alpha2::ContainerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ContainerStatsRequest* req,
             ::runtime::v1alpha2::ContainerStatsResponse* resp) {
               return service->ContainerStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::ListContainerStatsRequest, ::runtime::v1alpha2::ListContainerStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ListContainerStatsRequest* req,
             ::runtime::v1alpha2::ListContainerStatsResponse* resp) {
               return service->ListContainerStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::PodSandboxStatsRequest, ::runtime::v1alpha2::PodSandboxStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::PodSandboxStatsRequest* req,
             ::runtime::v1alpha2::PodSandboxStatsResponse* resp) {
               return service->PodSandboxStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::ListPodSandboxStatsRequest, ::runtime::v1alpha2::ListPodSandboxStatsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ListPodSandboxStatsRequest* req,
             ::runtime::v1alpha2::ListPodSandboxStatsResponse* resp) {
               return service->ListPodSandboxStats(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::UpdateRuntimeConfigRequest, ::runtime::v1alpha2::UpdateRuntimeConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::UpdateRuntimeConfigRequest* req,
             ::runtime::v1alpha2::UpdateRuntimeConfigResponse* resp) {
               return service->UpdateRuntimeConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeService::Service, ::runtime::v1alpha2::StatusRequest, ::runtime::v1alpha2::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RuntimeService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::StatusRequest* req,
             ::runtime::v1alpha2::StatusResponse* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
}

RuntimeService::Service::~Service() {
}

::grpc::Status RuntimeService::Service::Version(::grpc::ServerContext* context, const ::runtime::v1alpha2::VersionRequest* request, ::runtime::v1alpha2::VersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::RunPodSandbox(::grpc::ServerContext* context, const ::runtime::v1alpha2::RunPodSandboxRequest* request, ::runtime::v1alpha2::RunPodSandboxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::StopPodSandbox(::grpc::ServerContext* context, const ::runtime::v1alpha2::StopPodSandboxRequest* request, ::runtime::v1alpha2::StopPodSandboxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::RemovePodSandbox(::grpc::ServerContext* context, const ::runtime::v1alpha2::RemovePodSandboxRequest* request, ::runtime::v1alpha2::RemovePodSandboxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::PodSandboxStatus(::grpc::ServerContext* context, const ::runtime::v1alpha2::PodSandboxStatusRequest* request, ::runtime::v1alpha2::PodSandboxStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ListPodSandbox(::grpc::ServerContext* context, const ::runtime::v1alpha2::ListPodSandboxRequest* request, ::runtime::v1alpha2::ListPodSandboxResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::CreateContainer(::grpc::ServerContext* context, const ::runtime::v1alpha2::CreateContainerRequest* request, ::runtime::v1alpha2::CreateContainerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::StartContainer(::grpc::ServerContext* context, const ::runtime::v1alpha2::StartContainerRequest* request, ::runtime::v1alpha2::StartContainerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::StopContainer(::grpc::ServerContext* context, const ::runtime::v1alpha2::StopContainerRequest* request, ::runtime::v1alpha2::StopContainerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::RemoveContainer(::grpc::ServerContext* context, const ::runtime::v1alpha2::RemoveContainerRequest* request, ::runtime::v1alpha2::RemoveContainerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ListContainers(::grpc::ServerContext* context, const ::runtime::v1alpha2::ListContainersRequest* request, ::runtime::v1alpha2::ListContainersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ContainerStatus(::grpc::ServerContext* context, const ::runtime::v1alpha2::ContainerStatusRequest* request, ::runtime::v1alpha2::ContainerStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::UpdateContainerResources(::grpc::ServerContext* context, const ::runtime::v1alpha2::UpdateContainerResourcesRequest* request, ::runtime::v1alpha2::UpdateContainerResourcesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ReopenContainerLog(::grpc::ServerContext* context, const ::runtime::v1alpha2::ReopenContainerLogRequest* request, ::runtime::v1alpha2::ReopenContainerLogResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ExecSync(::grpc::ServerContext* context, const ::runtime::v1alpha2::ExecSyncRequest* request, ::runtime::v1alpha2::ExecSyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::Exec(::grpc::ServerContext* context, const ::runtime::v1alpha2::ExecRequest* request, ::runtime::v1alpha2::ExecResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::Attach(::grpc::ServerContext* context, const ::runtime::v1alpha2::AttachRequest* request, ::runtime::v1alpha2::AttachResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::PortForward(::grpc::ServerContext* context, const ::runtime::v1alpha2::PortForwardRequest* request, ::runtime::v1alpha2::PortForwardResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ContainerStats(::grpc::ServerContext* context, const ::runtime::v1alpha2::ContainerStatsRequest* request, ::runtime::v1alpha2::ContainerStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ListContainerStats(::grpc::ServerContext* context, const ::runtime::v1alpha2::ListContainerStatsRequest* request, ::runtime::v1alpha2::ListContainerStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::PodSandboxStats(::grpc::ServerContext* context, const ::runtime::v1alpha2::PodSandboxStatsRequest* request, ::runtime::v1alpha2::PodSandboxStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::ListPodSandboxStats(::grpc::ServerContext* context, const ::runtime::v1alpha2::ListPodSandboxStatsRequest* request, ::runtime::v1alpha2::ListPodSandboxStatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::UpdateRuntimeConfig(::grpc::ServerContext* context, const ::runtime::v1alpha2::UpdateRuntimeConfigRequest* request, ::runtime::v1alpha2::UpdateRuntimeConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeService::Service::Status(::grpc::ServerContext* context, const ::runtime::v1alpha2::StatusRequest* request, ::runtime::v1alpha2::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ImageService_method_names[] = {
  "/runtime.v1alpha2.ImageService/ListImages",
  "/runtime.v1alpha2.ImageService/ImageStatus",
  "/runtime.v1alpha2.ImageService/PullImage",
  "/runtime.v1alpha2.ImageService/RemoveImage",
  "/runtime.v1alpha2.ImageService/ImageFsInfo",
};

std::unique_ptr< ImageService::Stub> ImageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ImageService::Stub> stub(new ImageService::Stub(channel, options));
  return stub;
}

ImageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListImages_(ImageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImageStatus_(ImageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PullImage_(ImageService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveImage_(ImageService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ImageFsInfo_(ImageService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ImageService::Stub::ListImages(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListImagesRequest& request, ::runtime::v1alpha2::ListImagesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ListImagesRequest, ::runtime::v1alpha2::ListImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListImages_, context, request, response);
}

void ImageService::Stub::async::ListImages(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListImagesRequest* request, ::runtime::v1alpha2::ListImagesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ListImagesRequest, ::runtime::v1alpha2::ListImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListImages_, context, request, response, std::move(f));
}

void ImageService::Stub::async::ListImages(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListImagesRequest* request, ::runtime::v1alpha2::ListImagesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListImages_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ListImagesResponse>* ImageService::Stub::PrepareAsyncListImagesRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListImagesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ListImagesResponse, ::runtime::v1alpha2::ListImagesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListImages_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ListImagesResponse>* ImageService::Stub::AsyncListImagesRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ListImagesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListImagesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ImageService::Stub::ImageStatus(::grpc::ClientContext* context, const ::runtime::v1alpha2::ImageStatusRequest& request, ::runtime::v1alpha2::ImageStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ImageStatusRequest, ::runtime::v1alpha2::ImageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ImageStatus_, context, request, response);
}

void ImageService::Stub::async::ImageStatus(::grpc::ClientContext* context, const ::runtime::v1alpha2::ImageStatusRequest* request, ::runtime::v1alpha2::ImageStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ImageStatusRequest, ::runtime::v1alpha2::ImageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImageStatus_, context, request, response, std::move(f));
}

void ImageService::Stub::async::ImageStatus(::grpc::ClientContext* context, const ::runtime::v1alpha2::ImageStatusRequest* request, ::runtime::v1alpha2::ImageStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImageStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ImageStatusResponse>* ImageService::Stub::PrepareAsyncImageStatusRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ImageStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ImageStatusResponse, ::runtime::v1alpha2::ImageStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ImageStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ImageStatusResponse>* ImageService::Stub::AsyncImageStatusRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ImageStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncImageStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ImageService::Stub::PullImage(::grpc::ClientContext* context, const ::runtime::v1alpha2::PullImageRequest& request, ::runtime::v1alpha2::PullImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::PullImageRequest, ::runtime::v1alpha2::PullImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PullImage_, context, request, response);
}

void ImageService::Stub::async::PullImage(::grpc::ClientContext* context, const ::runtime::v1alpha2::PullImageRequest* request, ::runtime::v1alpha2::PullImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::PullImageRequest, ::runtime::v1alpha2::PullImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullImage_, context, request, response, std::move(f));
}

void ImageService::Stub::async::PullImage(::grpc::ClientContext* context, const ::runtime::v1alpha2::PullImageRequest* request, ::runtime::v1alpha2::PullImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::PullImageResponse>* ImageService::Stub::PrepareAsyncPullImageRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::PullImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::PullImageResponse, ::runtime::v1alpha2::PullImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PullImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::PullImageResponse>* ImageService::Stub::AsyncPullImageRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::PullImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPullImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ImageService::Stub::RemoveImage(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemoveImageRequest& request, ::runtime::v1alpha2::RemoveImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::RemoveImageRequest, ::runtime::v1alpha2::RemoveImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveImage_, context, request, response);
}

void ImageService::Stub::async::RemoveImage(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemoveImageRequest* request, ::runtime::v1alpha2::RemoveImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::RemoveImageRequest, ::runtime::v1alpha2::RemoveImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveImage_, context, request, response, std::move(f));
}

void ImageService::Stub::async::RemoveImage(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemoveImageRequest* request, ::runtime::v1alpha2::RemoveImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::RemoveImageResponse>* ImageService::Stub::PrepareAsyncRemoveImageRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemoveImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::RemoveImageResponse, ::runtime::v1alpha2::RemoveImageRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::RemoveImageResponse>* ImageService::Stub::AsyncRemoveImageRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::RemoveImageRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ImageService::Stub::ImageFsInfo(::grpc::ClientContext* context, const ::runtime::v1alpha2::ImageFsInfoRequest& request, ::runtime::v1alpha2::ImageFsInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::runtime::v1alpha2::ImageFsInfoRequest, ::runtime::v1alpha2::ImageFsInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ImageFsInfo_, context, request, response);
}

void ImageService::Stub::async::ImageFsInfo(::grpc::ClientContext* context, const ::runtime::v1alpha2::ImageFsInfoRequest* request, ::runtime::v1alpha2::ImageFsInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::runtime::v1alpha2::ImageFsInfoRequest, ::runtime::v1alpha2::ImageFsInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImageFsInfo_, context, request, response, std::move(f));
}

void ImageService::Stub::async::ImageFsInfo(::grpc::ClientContext* context, const ::runtime::v1alpha2::ImageFsInfoRequest* request, ::runtime::v1alpha2::ImageFsInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ImageFsInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ImageFsInfoResponse>* ImageService::Stub::PrepareAsyncImageFsInfoRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ImageFsInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::runtime::v1alpha2::ImageFsInfoResponse, ::runtime::v1alpha2::ImageFsInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ImageFsInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::runtime::v1alpha2::ImageFsInfoResponse>* ImageService::Stub::AsyncImageFsInfoRaw(::grpc::ClientContext* context, const ::runtime::v1alpha2::ImageFsInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncImageFsInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

ImageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::runtime::v1alpha2::ListImagesRequest, ::runtime::v1alpha2::ListImagesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ListImagesRequest* req,
             ::runtime::v1alpha2::ListImagesResponse* resp) {
               return service->ListImages(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::runtime::v1alpha2::ImageStatusRequest, ::runtime::v1alpha2::ImageStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ImageStatusRequest* req,
             ::runtime::v1alpha2::ImageStatusResponse* resp) {
               return service->ImageStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::runtime::v1alpha2::PullImageRequest, ::runtime::v1alpha2::PullImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::PullImageRequest* req,
             ::runtime::v1alpha2::PullImageResponse* resp) {
               return service->PullImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::runtime::v1alpha2::RemoveImageRequest, ::runtime::v1alpha2::RemoveImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::RemoveImageRequest* req,
             ::runtime::v1alpha2::RemoveImageResponse* resp) {
               return service->RemoveImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::runtime::v1alpha2::ImageFsInfoRequest, ::runtime::v1alpha2::ImageFsInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::runtime::v1alpha2::ImageFsInfoRequest* req,
             ::runtime::v1alpha2::ImageFsInfoResponse* resp) {
               return service->ImageFsInfo(ctx, req, resp);
             }, this)));
}

ImageService::Service::~Service() {
}

::grpc::Status ImageService::Service::ListImages(::grpc::ServerContext* context, const ::runtime::v1alpha2::ListImagesRequest* request, ::runtime::v1alpha2::ListImagesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageService::Service::ImageStatus(::grpc::ServerContext* context, const ::runtime::v1alpha2::ImageStatusRequest* request, ::runtime::v1alpha2::ImageStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageService::Service::PullImage(::grpc::ServerContext* context, const ::runtime::v1alpha2::PullImageRequest* request, ::runtime::v1alpha2::PullImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageService::Service::RemoveImage(::grpc::ServerContext* context, const ::runtime::v1alpha2::RemoveImageRequest* request, ::runtime::v1alpha2::RemoveImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageService::Service::ImageFsInfo(::grpc::ServerContext* context, const ::runtime::v1alpha2::ImageFsInfoRequest* request, ::runtime::v1alpha2::ImageFsInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace runtime
}  // namespace v1alpha2

