// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: network.proto

#include "network.pb.h"
#include "network.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace network {

static const char* NetworkService_method_names[] = {
  "/network.NetworkService/Create",
  "/network.NetworkService/Inspect",
  "/network.NetworkService/List",
  "/network.NetworkService/Remove",
};

std::unique_ptr< NetworkService::Stub> NetworkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetworkService::Stub> stub(new NetworkService::Stub(channel, options));
  return stub;
}

NetworkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(NetworkService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Inspect_(NetworkService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(NetworkService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(NetworkService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetworkService::Stub::Create(::grpc::ClientContext* context, const ::network::NetworkCreateRequest& request, ::network::NetworkCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::network::NetworkCreateRequest, ::network::NetworkCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void NetworkService::Stub::async::Create(::grpc::ClientContext* context, const ::network::NetworkCreateRequest* request, ::network::NetworkCreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::network::NetworkCreateRequest, ::network::NetworkCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void NetworkService::Stub::async::Create(::grpc::ClientContext* context, const ::network::NetworkCreateRequest* request, ::network::NetworkCreateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::NetworkCreateResponse>* NetworkService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::network::NetworkCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::network::NetworkCreateResponse, ::network::NetworkCreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::network::NetworkCreateResponse>* NetworkService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::network::NetworkCreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetworkService::Stub::Inspect(::grpc::ClientContext* context, const ::network::NetworkInspectRequest& request, ::network::NetworkInspectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::network::NetworkInspectRequest, ::network::NetworkInspectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Inspect_, context, request, response);
}

void NetworkService::Stub::async::Inspect(::grpc::ClientContext* context, const ::network::NetworkInspectRequest* request, ::network::NetworkInspectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::network::NetworkInspectRequest, ::network::NetworkInspectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Inspect_, context, request, response, std::move(f));
}

void NetworkService::Stub::async::Inspect(::grpc::ClientContext* context, const ::network::NetworkInspectRequest* request, ::network::NetworkInspectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Inspect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::NetworkInspectResponse>* NetworkService::Stub::PrepareAsyncInspectRaw(::grpc::ClientContext* context, const ::network::NetworkInspectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::network::NetworkInspectResponse, ::network::NetworkInspectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Inspect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::network::NetworkInspectResponse>* NetworkService::Stub::AsyncInspectRaw(::grpc::ClientContext* context, const ::network::NetworkInspectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInspectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetworkService::Stub::List(::grpc::ClientContext* context, const ::network::NetworkListRequest& request, ::network::NetworkListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::network::NetworkListRequest, ::network::NetworkListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void NetworkService::Stub::async::List(::grpc::ClientContext* context, const ::network::NetworkListRequest* request, ::network::NetworkListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::network::NetworkListRequest, ::network::NetworkListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void NetworkService::Stub::async::List(::grpc::ClientContext* context, const ::network::NetworkListRequest* request, ::network::NetworkListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::NetworkListResponse>* NetworkService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::network::NetworkListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::network::NetworkListResponse, ::network::NetworkListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::network::NetworkListResponse>* NetworkService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::network::NetworkListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NetworkService::Stub::Remove(::grpc::ClientContext* context, const ::network::NetworkRemoveRequest& request, ::network::NetworkRemoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::network::NetworkRemoveRequest, ::network::NetworkRemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Remove_, context, request, response);
}

void NetworkService::Stub::async::Remove(::grpc::ClientContext* context, const ::network::NetworkRemoveRequest* request, ::network::NetworkRemoveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::network::NetworkRemoveRequest, ::network::NetworkRemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, std::move(f));
}

void NetworkService::Stub::async::Remove(::grpc::ClientContext* context, const ::network::NetworkRemoveRequest* request, ::network::NetworkRemoveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Remove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::network::NetworkRemoveResponse>* NetworkService::Stub::PrepareAsyncRemoveRaw(::grpc::ClientContext* context, const ::network::NetworkRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::network::NetworkRemoveResponse, ::network::NetworkRemoveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Remove_, context, request);
}

::grpc::ClientAsyncResponseReader< ::network::NetworkRemoveResponse>* NetworkService::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::network::NetworkRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveRaw(context, request, cq);
  result->StartCall();
  return result;
}

NetworkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkService::Service, ::network::NetworkCreateRequest, ::network::NetworkCreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetworkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::network::NetworkCreateRequest* req,
             ::network::NetworkCreateResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkService::Service, ::network::NetworkInspectRequest, ::network::NetworkInspectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetworkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::network::NetworkInspectRequest* req,
             ::network::NetworkInspectResponse* resp) {
               return service->Inspect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkService::Service, ::network::NetworkListRequest, ::network::NetworkListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetworkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::network::NetworkListRequest* req,
             ::network::NetworkListResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkService::Service, ::network::NetworkRemoveRequest, ::network::NetworkRemoveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NetworkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::network::NetworkRemoveRequest* req,
             ::network::NetworkRemoveResponse* resp) {
               return service->Remove(ctx, req, resp);
             }, this)));
}

NetworkService::Service::~Service() {
}

::grpc::Status NetworkService::Service::Create(::grpc::ServerContext* context, const ::network::NetworkCreateRequest* request, ::network::NetworkCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkService::Service::Inspect(::grpc::ServerContext* context, const ::network::NetworkInspectRequest* request, ::network::NetworkInspectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkService::Service::List(::grpc::ServerContext* context, const ::network::NetworkListRequest* request, ::network::NetworkListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkService::Service::Remove(::grpc::ServerContext* context, const ::network::NetworkRemoveRequest* request, ::network::NetworkRemoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace network

