// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_network_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_network_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_network_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_network_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_network_2eproto;
namespace network {
class NetworkCreateRequest;
class NetworkCreateRequestDefaultTypeInternal;
extern NetworkCreateRequestDefaultTypeInternal _NetworkCreateRequest_default_instance_;
class NetworkCreateResponse;
class NetworkCreateResponseDefaultTypeInternal;
extern NetworkCreateResponseDefaultTypeInternal _NetworkCreateResponse_default_instance_;
class NetworkInfo;
class NetworkInfoDefaultTypeInternal;
extern NetworkInfoDefaultTypeInternal _NetworkInfo_default_instance_;
class NetworkInspectRequest;
class NetworkInspectRequestDefaultTypeInternal;
extern NetworkInspectRequestDefaultTypeInternal _NetworkInspectRequest_default_instance_;
class NetworkInspectResponse;
class NetworkInspectResponseDefaultTypeInternal;
extern NetworkInspectResponseDefaultTypeInternal _NetworkInspectResponse_default_instance_;
class NetworkListRequest;
class NetworkListRequestDefaultTypeInternal;
extern NetworkListRequestDefaultTypeInternal _NetworkListRequest_default_instance_;
class NetworkListRequest_FiltersEntry_DoNotUse;
class NetworkListRequest_FiltersEntry_DoNotUseDefaultTypeInternal;
extern NetworkListRequest_FiltersEntry_DoNotUseDefaultTypeInternal _NetworkListRequest_FiltersEntry_DoNotUse_default_instance_;
class NetworkListResponse;
class NetworkListResponseDefaultTypeInternal;
extern NetworkListResponseDefaultTypeInternal _NetworkListResponse_default_instance_;
class NetworkRemoveRequest;
class NetworkRemoveRequestDefaultTypeInternal;
extern NetworkRemoveRequestDefaultTypeInternal _NetworkRemoveRequest_default_instance_;
class NetworkRemoveResponse;
class NetworkRemoveResponseDefaultTypeInternal;
extern NetworkRemoveResponseDefaultTypeInternal _NetworkRemoveResponse_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::NetworkCreateRequest* Arena::CreateMaybeMessage<::network::NetworkCreateRequest>(Arena*);
template<> ::network::NetworkCreateResponse* Arena::CreateMaybeMessage<::network::NetworkCreateResponse>(Arena*);
template<> ::network::NetworkInfo* Arena::CreateMaybeMessage<::network::NetworkInfo>(Arena*);
template<> ::network::NetworkInspectRequest* Arena::CreateMaybeMessage<::network::NetworkInspectRequest>(Arena*);
template<> ::network::NetworkInspectResponse* Arena::CreateMaybeMessage<::network::NetworkInspectResponse>(Arena*);
template<> ::network::NetworkListRequest* Arena::CreateMaybeMessage<::network::NetworkListRequest>(Arena*);
template<> ::network::NetworkListRequest_FiltersEntry_DoNotUse* Arena::CreateMaybeMessage<::network::NetworkListRequest_FiltersEntry_DoNotUse>(Arena*);
template<> ::network::NetworkListResponse* Arena::CreateMaybeMessage<::network::NetworkListResponse>(Arena*);
template<> ::network::NetworkRemoveRequest* Arena::CreateMaybeMessage<::network::NetworkRemoveRequest>(Arena*);
template<> ::network::NetworkRemoveResponse* Arena::CreateMaybeMessage<::network::NetworkRemoveResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class NetworkInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.NetworkInfo) */ {
 public:
  inline NetworkInfo() : NetworkInfo(nullptr) {}
  virtual ~NetworkInfo();

  NetworkInfo(const NetworkInfo& from);
  NetworkInfo(NetworkInfo&& from) noexcept
    : NetworkInfo() {
    *this = ::std::move(from);
  }

  inline NetworkInfo& operator=(const NetworkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkInfo& operator=(NetworkInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkInfo& default_instance();

  static inline const NetworkInfo* internal_default_instance() {
    return reinterpret_cast<const NetworkInfo*>(
               &_NetworkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkInfo& a, NetworkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkInfo* New() const final {
    return CreateMaybeMessage<NetworkInfo>(nullptr);
  }

  NetworkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInfo>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.NetworkInfo";
  }
  protected:
  explicit NetworkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginsFieldNumber = 3,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated string plugins = 3;
  int plugins_size() const;
  private:
  int _internal_plugins_size() const;
  public:
  void clear_plugins();
  const std::string& plugins(int index) const;
  std::string* mutable_plugins(int index);
  void set_plugins(int index, const std::string& value);
  void set_plugins(int index, std::string&& value);
  void set_plugins(int index, const char* value);
  void set_plugins(int index, const char* value, size_t size);
  std::string* add_plugins();
  void add_plugins(const std::string& value);
  void add_plugins(std::string&& value);
  void add_plugins(const char* value);
  void add_plugins(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& plugins() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_plugins();
  private:
  const std::string& _internal_plugins(int index) const;
  std::string* _internal_add_plugins();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:network.NetworkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> plugins_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkCreateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.NetworkCreateRequest) */ {
 public:
  inline NetworkCreateRequest() : NetworkCreateRequest(nullptr) {}
  virtual ~NetworkCreateRequest();

  NetworkCreateRequest(const NetworkCreateRequest& from);
  NetworkCreateRequest(NetworkCreateRequest&& from) noexcept
    : NetworkCreateRequest() {
    *this = ::std::move(from);
  }

  inline NetworkCreateRequest& operator=(const NetworkCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkCreateRequest& operator=(NetworkCreateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkCreateRequest& default_instance();

  static inline const NetworkCreateRequest* internal_default_instance() {
    return reinterpret_cast<const NetworkCreateRequest*>(
               &_NetworkCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkCreateRequest& a, NetworkCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkCreateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkCreateRequest* New() const final {
    return CreateMaybeMessage<NetworkCreateRequest>(nullptr);
  }

  NetworkCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkCreateRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkCreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.NetworkCreateRequest";
  }
  protected:
  explicit NetworkCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDriverFieldNumber = 2,
    kGatewayFieldNumber = 3,
    kSubnetFieldNumber = 5,
    kInternalFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string driver = 2;
  void clear_driver();
  const std::string& driver() const;
  void set_driver(const std::string& value);
  void set_driver(std::string&& value);
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  std::string* mutable_driver();
  std::string* release_driver();
  void set_allocated_driver(std::string* driver);
  private:
  const std::string& _internal_driver() const;
  void _internal_set_driver(const std::string& value);
  std::string* _internal_mutable_driver();
  public:

  // string gateway = 3;
  void clear_gateway();
  const std::string& gateway() const;
  void set_gateway(const std::string& value);
  void set_gateway(std::string&& value);
  void set_gateway(const char* value);
  void set_gateway(const char* value, size_t size);
  std::string* mutable_gateway();
  std::string* release_gateway();
  void set_allocated_gateway(std::string* gateway);
  private:
  const std::string& _internal_gateway() const;
  void _internal_set_gateway(const std::string& value);
  std::string* _internal_mutable_gateway();
  public:

  // string subnet = 5;
  void clear_subnet();
  const std::string& subnet() const;
  void set_subnet(const std::string& value);
  void set_subnet(std::string&& value);
  void set_subnet(const char* value);
  void set_subnet(const char* value, size_t size);
  std::string* mutable_subnet();
  std::string* release_subnet();
  void set_allocated_subnet(std::string* subnet);
  private:
  const std::string& _internal_subnet() const;
  void _internal_set_subnet(const std::string& value);
  std::string* _internal_mutable_subnet();
  public:

  // bool internal = 4;
  void clear_internal();
  bool internal() const;
  void set_internal(bool value);
  private:
  bool _internal_internal() const;
  void _internal_set_internal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:network.NetworkCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr driver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subnet_;
  bool internal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkCreateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.NetworkCreateResponse) */ {
 public:
  inline NetworkCreateResponse() : NetworkCreateResponse(nullptr) {}
  virtual ~NetworkCreateResponse();

  NetworkCreateResponse(const NetworkCreateResponse& from);
  NetworkCreateResponse(NetworkCreateResponse&& from) noexcept
    : NetworkCreateResponse() {
    *this = ::std::move(from);
  }

  inline NetworkCreateResponse& operator=(const NetworkCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkCreateResponse& operator=(NetworkCreateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkCreateResponse& default_instance();

  static inline const NetworkCreateResponse* internal_default_instance() {
    return reinterpret_cast<const NetworkCreateResponse*>(
               &_NetworkCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetworkCreateResponse& a, NetworkCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkCreateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkCreateResponse* New() const final {
    return CreateMaybeMessage<NetworkCreateResponse>(nullptr);
  }

  NetworkCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkCreateResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkCreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.NetworkCreateResponse";
  }
  protected:
  explicit NetworkCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:network.NetworkCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkInspectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.NetworkInspectRequest) */ {
 public:
  inline NetworkInspectRequest() : NetworkInspectRequest(nullptr) {}
  virtual ~NetworkInspectRequest();

  NetworkInspectRequest(const NetworkInspectRequest& from);
  NetworkInspectRequest(NetworkInspectRequest&& from) noexcept
    : NetworkInspectRequest() {
    *this = ::std::move(from);
  }

  inline NetworkInspectRequest& operator=(const NetworkInspectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkInspectRequest& operator=(NetworkInspectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkInspectRequest& default_instance();

  static inline const NetworkInspectRequest* internal_default_instance() {
    return reinterpret_cast<const NetworkInspectRequest*>(
               &_NetworkInspectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NetworkInspectRequest& a, NetworkInspectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkInspectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkInspectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkInspectRequest* New() const final {
    return CreateMaybeMessage<NetworkInspectRequest>(nullptr);
  }

  NetworkInspectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInspectRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInspectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.NetworkInspectRequest";
  }
  protected:
  explicit NetworkInspectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:network.NetworkInspectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkInspectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.NetworkInspectResponse) */ {
 public:
  inline NetworkInspectResponse() : NetworkInspectResponse(nullptr) {}
  virtual ~NetworkInspectResponse();

  NetworkInspectResponse(const NetworkInspectResponse& from);
  NetworkInspectResponse(NetworkInspectResponse&& from) noexcept
    : NetworkInspectResponse() {
    *this = ::std::move(from);
  }

  inline NetworkInspectResponse& operator=(const NetworkInspectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkInspectResponse& operator=(NetworkInspectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkInspectResponse& default_instance();

  static inline const NetworkInspectResponse* internal_default_instance() {
    return reinterpret_cast<const NetworkInspectResponse*>(
               &_NetworkInspectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NetworkInspectResponse& a, NetworkInspectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkInspectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkInspectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkInspectResponse* New() const final {
    return CreateMaybeMessage<NetworkInspectResponse>(nullptr);
  }

  NetworkInspectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInspectResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInspectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.NetworkInspectResponse";
  }
  protected:
  explicit NetworkInspectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkJSONFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string NetworkJSON = 1;
  void clear_networkjson();
  const std::string& networkjson() const;
  void set_networkjson(const std::string& value);
  void set_networkjson(std::string&& value);
  void set_networkjson(const char* value);
  void set_networkjson(const char* value, size_t size);
  std::string* mutable_networkjson();
  std::string* release_networkjson();
  void set_allocated_networkjson(std::string* networkjson);
  private:
  const std::string& _internal_networkjson() const;
  void _internal_set_networkjson(const std::string& value);
  std::string* _internal_mutable_networkjson();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:network.NetworkInspectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr networkjson_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkListRequest_FiltersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetworkListRequest_FiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NetworkListRequest_FiltersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  NetworkListRequest_FiltersEntry_DoNotUse();
  explicit NetworkListRequest_FiltersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NetworkListRequest_FiltersEntry_DoNotUse& other);
  static const NetworkListRequest_FiltersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NetworkListRequest_FiltersEntry_DoNotUse*>(&_NetworkListRequest_FiltersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "network.NetworkListRequest.FiltersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "network.NetworkListRequest.FiltersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class NetworkListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.NetworkListRequest) */ {
 public:
  inline NetworkListRequest() : NetworkListRequest(nullptr) {}
  virtual ~NetworkListRequest();

  NetworkListRequest(const NetworkListRequest& from);
  NetworkListRequest(NetworkListRequest&& from) noexcept
    : NetworkListRequest() {
    *this = ::std::move(from);
  }

  inline NetworkListRequest& operator=(const NetworkListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkListRequest& operator=(NetworkListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkListRequest& default_instance();

  static inline const NetworkListRequest* internal_default_instance() {
    return reinterpret_cast<const NetworkListRequest*>(
               &_NetworkListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NetworkListRequest& a, NetworkListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkListRequest* New() const final {
    return CreateMaybeMessage<NetworkListRequest>(nullptr);
  }

  NetworkListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkListRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.NetworkListRequest";
  }
  protected:
  explicit NetworkListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFiltersFieldNumber = 1,
  };
  // map<string, string> filters = 1;
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_filters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      filters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_filters();

  // @@protoc_insertion_point(class_scope:network.NetworkListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NetworkListRequest_FiltersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> filters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.NetworkListResponse) */ {
 public:
  inline NetworkListResponse() : NetworkListResponse(nullptr) {}
  virtual ~NetworkListResponse();

  NetworkListResponse(const NetworkListResponse& from);
  NetworkListResponse(NetworkListResponse&& from) noexcept
    : NetworkListResponse() {
    *this = ::std::move(from);
  }

  inline NetworkListResponse& operator=(const NetworkListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkListResponse& operator=(NetworkListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkListResponse& default_instance();

  static inline const NetworkListResponse* internal_default_instance() {
    return reinterpret_cast<const NetworkListResponse*>(
               &_NetworkListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NetworkListResponse& a, NetworkListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkListResponse* New() const final {
    return CreateMaybeMessage<NetworkListResponse>(nullptr);
  }

  NetworkListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkListResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.NetworkListResponse";
  }
  protected:
  explicit NetworkListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworksFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // repeated .network.NetworkInfo networks = 1;
  int networks_size() const;
  private:
  int _internal_networks_size() const;
  public:
  void clear_networks();
  ::network::NetworkInfo* mutable_networks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::NetworkInfo >*
      mutable_networks();
  private:
  const ::network::NetworkInfo& _internal_networks(int index) const;
  ::network::NetworkInfo* _internal_add_networks();
  public:
  const ::network::NetworkInfo& networks(int index) const;
  ::network::NetworkInfo* add_networks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::NetworkInfo >&
      networks() const;

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:network.NetworkListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::NetworkInfo > networks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkRemoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.NetworkRemoveRequest) */ {
 public:
  inline NetworkRemoveRequest() : NetworkRemoveRequest(nullptr) {}
  virtual ~NetworkRemoveRequest();

  NetworkRemoveRequest(const NetworkRemoveRequest& from);
  NetworkRemoveRequest(NetworkRemoveRequest&& from) noexcept
    : NetworkRemoveRequest() {
    *this = ::std::move(from);
  }

  inline NetworkRemoveRequest& operator=(const NetworkRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkRemoveRequest& operator=(NetworkRemoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkRemoveRequest& default_instance();

  static inline const NetworkRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const NetworkRemoveRequest*>(
               &_NetworkRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NetworkRemoveRequest& a, NetworkRemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkRemoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkRemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkRemoveRequest* New() const final {
    return CreateMaybeMessage<NetworkRemoveRequest>(nullptr);
  }

  NetworkRemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkRemoveRequest>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkRemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.NetworkRemoveRequest";
  }
  protected:
  explicit NetworkRemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:network.NetworkRemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// -------------------------------------------------------------------

class NetworkRemoveResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:network.NetworkRemoveResponse) */ {
 public:
  inline NetworkRemoveResponse() : NetworkRemoveResponse(nullptr) {}
  virtual ~NetworkRemoveResponse();

  NetworkRemoveResponse(const NetworkRemoveResponse& from);
  NetworkRemoveResponse(NetworkRemoveResponse&& from) noexcept
    : NetworkRemoveResponse() {
    *this = ::std::move(from);
  }

  inline NetworkRemoveResponse& operator=(const NetworkRemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkRemoveResponse& operator=(NetworkRemoveResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkRemoveResponse& default_instance();

  static inline const NetworkRemoveResponse* internal_default_instance() {
    return reinterpret_cast<const NetworkRemoveResponse*>(
               &_NetworkRemoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NetworkRemoveResponse& a, NetworkRemoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkRemoveResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkRemoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkRemoveResponse* New() const final {
    return CreateMaybeMessage<NetworkRemoveResponse>(nullptr);
  }

  NetworkRemoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkRemoveResponse>(arena);
  }
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkRemoveResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.NetworkRemoveResponse";
  }
  protected:
  explicit NetworkRemoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_network_2eproto);
    return ::descriptor_table_network_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kErrmsgFieldNumber = 3,
    kCcFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string errmsg = 3;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // uint32 cc = 2;
  void clear_cc();
  ::PROTOBUF_NAMESPACE_ID::uint32 cc() const;
  void set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cc() const;
  void _internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:network.NetworkRemoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_network_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkInfo

// string name = 1;
inline void NetworkInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NetworkInfo::name() const {
  // @@protoc_insertion_point(field_get:network.NetworkInfo.name)
  return _internal_name();
}
inline void NetworkInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:network.NetworkInfo.name)
}
inline std::string* NetworkInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:network.NetworkInfo.name)
  return _internal_mutable_name();
}
inline const std::string& NetworkInfo::_internal_name() const {
  return name_.Get();
}
inline void NetworkInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkInfo.name)
}
inline void NetworkInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkInfo.name)
}
inline void NetworkInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkInfo.name)
}
inline std::string* NetworkInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkInfo::release_name() {
  // @@protoc_insertion_point(field_release:network.NetworkInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkInfo.name)
}

// string version = 2;
inline void NetworkInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& NetworkInfo::version() const {
  // @@protoc_insertion_point(field_get:network.NetworkInfo.version)
  return _internal_version();
}
inline void NetworkInfo::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:network.NetworkInfo.version)
}
inline std::string* NetworkInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:network.NetworkInfo.version)
  return _internal_mutable_version();
}
inline const std::string& NetworkInfo::_internal_version() const {
  return version_.Get();
}
inline void NetworkInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkInfo::set_version(std::string&& value) {
  
  version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkInfo.version)
}
inline void NetworkInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkInfo.version)
}
inline void NetworkInfo::set_version(const char* value,
    size_t size) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkInfo.version)
}
inline std::string* NetworkInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkInfo::release_version() {
  // @@protoc_insertion_point(field_release:network.NetworkInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkInfo.version)
}

// repeated string plugins = 3;
inline int NetworkInfo::_internal_plugins_size() const {
  return plugins_.size();
}
inline int NetworkInfo::plugins_size() const {
  return _internal_plugins_size();
}
inline void NetworkInfo::clear_plugins() {
  plugins_.Clear();
}
inline std::string* NetworkInfo::add_plugins() {
  // @@protoc_insertion_point(field_add_mutable:network.NetworkInfo.plugins)
  return _internal_add_plugins();
}
inline const std::string& NetworkInfo::_internal_plugins(int index) const {
  return plugins_.Get(index);
}
inline const std::string& NetworkInfo::plugins(int index) const {
  // @@protoc_insertion_point(field_get:network.NetworkInfo.plugins)
  return _internal_plugins(index);
}
inline std::string* NetworkInfo::mutable_plugins(int index) {
  // @@protoc_insertion_point(field_mutable:network.NetworkInfo.plugins)
  return plugins_.Mutable(index);
}
inline void NetworkInfo::set_plugins(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:network.NetworkInfo.plugins)
  plugins_.Mutable(index)->assign(value);
}
inline void NetworkInfo::set_plugins(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:network.NetworkInfo.plugins)
  plugins_.Mutable(index)->assign(std::move(value));
}
inline void NetworkInfo::set_plugins(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  plugins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.NetworkInfo.plugins)
}
inline void NetworkInfo::set_plugins(int index, const char* value, size_t size) {
  plugins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.NetworkInfo.plugins)
}
inline std::string* NetworkInfo::_internal_add_plugins() {
  return plugins_.Add();
}
inline void NetworkInfo::add_plugins(const std::string& value) {
  plugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.NetworkInfo.plugins)
}
inline void NetworkInfo::add_plugins(std::string&& value) {
  plugins_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.NetworkInfo.plugins)
}
inline void NetworkInfo::add_plugins(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  plugins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.NetworkInfo.plugins)
}
inline void NetworkInfo::add_plugins(const char* value, size_t size) {
  plugins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.NetworkInfo.plugins)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NetworkInfo::plugins() const {
  // @@protoc_insertion_point(field_list:network.NetworkInfo.plugins)
  return plugins_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NetworkInfo::mutable_plugins() {
  // @@protoc_insertion_point(field_mutable_list:network.NetworkInfo.plugins)
  return &plugins_;
}

// -------------------------------------------------------------------

// NetworkCreateRequest

// string name = 1;
inline void NetworkCreateRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NetworkCreateRequest::name() const {
  // @@protoc_insertion_point(field_get:network.NetworkCreateRequest.name)
  return _internal_name();
}
inline void NetworkCreateRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:network.NetworkCreateRequest.name)
}
inline std::string* NetworkCreateRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:network.NetworkCreateRequest.name)
  return _internal_mutable_name();
}
inline const std::string& NetworkCreateRequest::_internal_name() const {
  return name_.Get();
}
inline void NetworkCreateRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkCreateRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkCreateRequest.name)
}
inline void NetworkCreateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkCreateRequest.name)
}
inline void NetworkCreateRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkCreateRequest.name)
}
inline std::string* NetworkCreateRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkCreateRequest::release_name() {
  // @@protoc_insertion_point(field_release:network.NetworkCreateRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkCreateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkCreateRequest.name)
}

// string driver = 2;
inline void NetworkCreateRequest::clear_driver() {
  driver_.ClearToEmpty();
}
inline const std::string& NetworkCreateRequest::driver() const {
  // @@protoc_insertion_point(field_get:network.NetworkCreateRequest.driver)
  return _internal_driver();
}
inline void NetworkCreateRequest::set_driver(const std::string& value) {
  _internal_set_driver(value);
  // @@protoc_insertion_point(field_set:network.NetworkCreateRequest.driver)
}
inline std::string* NetworkCreateRequest::mutable_driver() {
  // @@protoc_insertion_point(field_mutable:network.NetworkCreateRequest.driver)
  return _internal_mutable_driver();
}
inline const std::string& NetworkCreateRequest::_internal_driver() const {
  return driver_.Get();
}
inline void NetworkCreateRequest::_internal_set_driver(const std::string& value) {
  
  driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkCreateRequest::set_driver(std::string&& value) {
  
  driver_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkCreateRequest.driver)
}
inline void NetworkCreateRequest::set_driver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkCreateRequest.driver)
}
inline void NetworkCreateRequest::set_driver(const char* value,
    size_t size) {
  
  driver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkCreateRequest.driver)
}
inline std::string* NetworkCreateRequest::_internal_mutable_driver() {
  
  return driver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkCreateRequest::release_driver() {
  // @@protoc_insertion_point(field_release:network.NetworkCreateRequest.driver)
  return driver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkCreateRequest::set_allocated_driver(std::string* driver) {
  if (driver != nullptr) {
    
  } else {
    
  }
  driver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), driver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkCreateRequest.driver)
}

// string gateway = 3;
inline void NetworkCreateRequest::clear_gateway() {
  gateway_.ClearToEmpty();
}
inline const std::string& NetworkCreateRequest::gateway() const {
  // @@protoc_insertion_point(field_get:network.NetworkCreateRequest.gateway)
  return _internal_gateway();
}
inline void NetworkCreateRequest::set_gateway(const std::string& value) {
  _internal_set_gateway(value);
  // @@protoc_insertion_point(field_set:network.NetworkCreateRequest.gateway)
}
inline std::string* NetworkCreateRequest::mutable_gateway() {
  // @@protoc_insertion_point(field_mutable:network.NetworkCreateRequest.gateway)
  return _internal_mutable_gateway();
}
inline const std::string& NetworkCreateRequest::_internal_gateway() const {
  return gateway_.Get();
}
inline void NetworkCreateRequest::_internal_set_gateway(const std::string& value) {
  
  gateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkCreateRequest::set_gateway(std::string&& value) {
  
  gateway_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkCreateRequest.gateway)
}
inline void NetworkCreateRequest::set_gateway(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkCreateRequest.gateway)
}
inline void NetworkCreateRequest::set_gateway(const char* value,
    size_t size) {
  
  gateway_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkCreateRequest.gateway)
}
inline std::string* NetworkCreateRequest::_internal_mutable_gateway() {
  
  return gateway_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkCreateRequest::release_gateway() {
  // @@protoc_insertion_point(field_release:network.NetworkCreateRequest.gateway)
  return gateway_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkCreateRequest::set_allocated_gateway(std::string* gateway) {
  if (gateway != nullptr) {
    
  } else {
    
  }
  gateway_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gateway,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkCreateRequest.gateway)
}

// bool internal = 4;
inline void NetworkCreateRequest::clear_internal() {
  internal_ = false;
}
inline bool NetworkCreateRequest::_internal_internal() const {
  return internal_;
}
inline bool NetworkCreateRequest::internal() const {
  // @@protoc_insertion_point(field_get:network.NetworkCreateRequest.internal)
  return _internal_internal();
}
inline void NetworkCreateRequest::_internal_set_internal(bool value) {
  
  internal_ = value;
}
inline void NetworkCreateRequest::set_internal(bool value) {
  _internal_set_internal(value);
  // @@protoc_insertion_point(field_set:network.NetworkCreateRequest.internal)
}

// string subnet = 5;
inline void NetworkCreateRequest::clear_subnet() {
  subnet_.ClearToEmpty();
}
inline const std::string& NetworkCreateRequest::subnet() const {
  // @@protoc_insertion_point(field_get:network.NetworkCreateRequest.subnet)
  return _internal_subnet();
}
inline void NetworkCreateRequest::set_subnet(const std::string& value) {
  _internal_set_subnet(value);
  // @@protoc_insertion_point(field_set:network.NetworkCreateRequest.subnet)
}
inline std::string* NetworkCreateRequest::mutable_subnet() {
  // @@protoc_insertion_point(field_mutable:network.NetworkCreateRequest.subnet)
  return _internal_mutable_subnet();
}
inline const std::string& NetworkCreateRequest::_internal_subnet() const {
  return subnet_.Get();
}
inline void NetworkCreateRequest::_internal_set_subnet(const std::string& value) {
  
  subnet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkCreateRequest::set_subnet(std::string&& value) {
  
  subnet_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkCreateRequest.subnet)
}
inline void NetworkCreateRequest::set_subnet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkCreateRequest.subnet)
}
inline void NetworkCreateRequest::set_subnet(const char* value,
    size_t size) {
  
  subnet_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkCreateRequest.subnet)
}
inline std::string* NetworkCreateRequest::_internal_mutable_subnet() {
  
  return subnet_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkCreateRequest::release_subnet() {
  // @@protoc_insertion_point(field_release:network.NetworkCreateRequest.subnet)
  return subnet_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkCreateRequest::set_allocated_subnet(std::string* subnet) {
  if (subnet != nullptr) {
    
  } else {
    
  }
  subnet_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subnet,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkCreateRequest.subnet)
}

// -------------------------------------------------------------------

// NetworkCreateResponse

// string name = 1;
inline void NetworkCreateResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NetworkCreateResponse::name() const {
  // @@protoc_insertion_point(field_get:network.NetworkCreateResponse.name)
  return _internal_name();
}
inline void NetworkCreateResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:network.NetworkCreateResponse.name)
}
inline std::string* NetworkCreateResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:network.NetworkCreateResponse.name)
  return _internal_mutable_name();
}
inline const std::string& NetworkCreateResponse::_internal_name() const {
  return name_.Get();
}
inline void NetworkCreateResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkCreateResponse::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkCreateResponse.name)
}
inline void NetworkCreateResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkCreateResponse.name)
}
inline void NetworkCreateResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkCreateResponse.name)
}
inline std::string* NetworkCreateResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkCreateResponse::release_name() {
  // @@protoc_insertion_point(field_release:network.NetworkCreateResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkCreateResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkCreateResponse.name)
}

// uint32 cc = 2;
inline void NetworkCreateResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkCreateResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkCreateResponse::cc() const {
  // @@protoc_insertion_point(field_get:network.NetworkCreateResponse.cc)
  return _internal_cc();
}
inline void NetworkCreateResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void NetworkCreateResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:network.NetworkCreateResponse.cc)
}

// string errmsg = 3;
inline void NetworkCreateResponse::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& NetworkCreateResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:network.NetworkCreateResponse.errmsg)
  return _internal_errmsg();
}
inline void NetworkCreateResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:network.NetworkCreateResponse.errmsg)
}
inline std::string* NetworkCreateResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:network.NetworkCreateResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& NetworkCreateResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void NetworkCreateResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkCreateResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkCreateResponse.errmsg)
}
inline void NetworkCreateResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkCreateResponse.errmsg)
}
inline void NetworkCreateResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkCreateResponse.errmsg)
}
inline std::string* NetworkCreateResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkCreateResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:network.NetworkCreateResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkCreateResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkCreateResponse.errmsg)
}

// -------------------------------------------------------------------

// NetworkInspectRequest

// string name = 1;
inline void NetworkInspectRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NetworkInspectRequest::name() const {
  // @@protoc_insertion_point(field_get:network.NetworkInspectRequest.name)
  return _internal_name();
}
inline void NetworkInspectRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:network.NetworkInspectRequest.name)
}
inline std::string* NetworkInspectRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:network.NetworkInspectRequest.name)
  return _internal_mutable_name();
}
inline const std::string& NetworkInspectRequest::_internal_name() const {
  return name_.Get();
}
inline void NetworkInspectRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkInspectRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkInspectRequest.name)
}
inline void NetworkInspectRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkInspectRequest.name)
}
inline void NetworkInspectRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkInspectRequest.name)
}
inline std::string* NetworkInspectRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkInspectRequest::release_name() {
  // @@protoc_insertion_point(field_release:network.NetworkInspectRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkInspectRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkInspectRequest.name)
}

// -------------------------------------------------------------------

// NetworkInspectResponse

// string NetworkJSON = 1;
inline void NetworkInspectResponse::clear_networkjson() {
  networkjson_.ClearToEmpty();
}
inline const std::string& NetworkInspectResponse::networkjson() const {
  // @@protoc_insertion_point(field_get:network.NetworkInspectResponse.NetworkJSON)
  return _internal_networkjson();
}
inline void NetworkInspectResponse::set_networkjson(const std::string& value) {
  _internal_set_networkjson(value);
  // @@protoc_insertion_point(field_set:network.NetworkInspectResponse.NetworkJSON)
}
inline std::string* NetworkInspectResponse::mutable_networkjson() {
  // @@protoc_insertion_point(field_mutable:network.NetworkInspectResponse.NetworkJSON)
  return _internal_mutable_networkjson();
}
inline const std::string& NetworkInspectResponse::_internal_networkjson() const {
  return networkjson_.Get();
}
inline void NetworkInspectResponse::_internal_set_networkjson(const std::string& value) {
  
  networkjson_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkInspectResponse::set_networkjson(std::string&& value) {
  
  networkjson_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkInspectResponse.NetworkJSON)
}
inline void NetworkInspectResponse::set_networkjson(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  networkjson_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkInspectResponse.NetworkJSON)
}
inline void NetworkInspectResponse::set_networkjson(const char* value,
    size_t size) {
  
  networkjson_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkInspectResponse.NetworkJSON)
}
inline std::string* NetworkInspectResponse::_internal_mutable_networkjson() {
  
  return networkjson_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkInspectResponse::release_networkjson() {
  // @@protoc_insertion_point(field_release:network.NetworkInspectResponse.NetworkJSON)
  return networkjson_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkInspectResponse::set_allocated_networkjson(std::string* networkjson) {
  if (networkjson != nullptr) {
    
  } else {
    
  }
  networkjson_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), networkjson,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkInspectResponse.NetworkJSON)
}

// uint32 cc = 2;
inline void NetworkInspectResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInspectResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInspectResponse::cc() const {
  // @@protoc_insertion_point(field_get:network.NetworkInspectResponse.cc)
  return _internal_cc();
}
inline void NetworkInspectResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void NetworkInspectResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:network.NetworkInspectResponse.cc)
}

// string errmsg = 3;
inline void NetworkInspectResponse::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& NetworkInspectResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:network.NetworkInspectResponse.errmsg)
  return _internal_errmsg();
}
inline void NetworkInspectResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:network.NetworkInspectResponse.errmsg)
}
inline std::string* NetworkInspectResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:network.NetworkInspectResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& NetworkInspectResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void NetworkInspectResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkInspectResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkInspectResponse.errmsg)
}
inline void NetworkInspectResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkInspectResponse.errmsg)
}
inline void NetworkInspectResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkInspectResponse.errmsg)
}
inline std::string* NetworkInspectResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkInspectResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:network.NetworkInspectResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkInspectResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkInspectResponse.errmsg)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NetworkListRequest

// map<string, string> filters = 1;
inline int NetworkListRequest::_internal_filters_size() const {
  return filters_.size();
}
inline int NetworkListRequest::filters_size() const {
  return _internal_filters_size();
}
inline void NetworkListRequest::clear_filters() {
  filters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NetworkListRequest::_internal_filters() const {
  return filters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NetworkListRequest::filters() const {
  // @@protoc_insertion_point(field_map:network.NetworkListRequest.filters)
  return _internal_filters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NetworkListRequest::_internal_mutable_filters() {
  return filters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NetworkListRequest::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_map:network.NetworkListRequest.filters)
  return _internal_mutable_filters();
}

// -------------------------------------------------------------------

// NetworkListResponse

// repeated .network.NetworkInfo networks = 1;
inline int NetworkListResponse::_internal_networks_size() const {
  return networks_.size();
}
inline int NetworkListResponse::networks_size() const {
  return _internal_networks_size();
}
inline void NetworkListResponse::clear_networks() {
  networks_.Clear();
}
inline ::network::NetworkInfo* NetworkListResponse::mutable_networks(int index) {
  // @@protoc_insertion_point(field_mutable:network.NetworkListResponse.networks)
  return networks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::NetworkInfo >*
NetworkListResponse::mutable_networks() {
  // @@protoc_insertion_point(field_mutable_list:network.NetworkListResponse.networks)
  return &networks_;
}
inline const ::network::NetworkInfo& NetworkListResponse::_internal_networks(int index) const {
  return networks_.Get(index);
}
inline const ::network::NetworkInfo& NetworkListResponse::networks(int index) const {
  // @@protoc_insertion_point(field_get:network.NetworkListResponse.networks)
  return _internal_networks(index);
}
inline ::network::NetworkInfo* NetworkListResponse::_internal_add_networks() {
  return networks_.Add();
}
inline ::network::NetworkInfo* NetworkListResponse::add_networks() {
  // @@protoc_insertion_point(field_add:network.NetworkListResponse.networks)
  return _internal_add_networks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::NetworkInfo >&
NetworkListResponse::networks() const {
  // @@protoc_insertion_point(field_list:network.NetworkListResponse.networks)
  return networks_;
}

// uint32 cc = 2;
inline void NetworkListResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkListResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkListResponse::cc() const {
  // @@protoc_insertion_point(field_get:network.NetworkListResponse.cc)
  return _internal_cc();
}
inline void NetworkListResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void NetworkListResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:network.NetworkListResponse.cc)
}

// string errmsg = 3;
inline void NetworkListResponse::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& NetworkListResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:network.NetworkListResponse.errmsg)
  return _internal_errmsg();
}
inline void NetworkListResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:network.NetworkListResponse.errmsg)
}
inline std::string* NetworkListResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:network.NetworkListResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& NetworkListResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void NetworkListResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkListResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkListResponse.errmsg)
}
inline void NetworkListResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkListResponse.errmsg)
}
inline void NetworkListResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkListResponse.errmsg)
}
inline std::string* NetworkListResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkListResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:network.NetworkListResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkListResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkListResponse.errmsg)
}

// -------------------------------------------------------------------

// NetworkRemoveRequest

// string name = 1;
inline void NetworkRemoveRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NetworkRemoveRequest::name() const {
  // @@protoc_insertion_point(field_get:network.NetworkRemoveRequest.name)
  return _internal_name();
}
inline void NetworkRemoveRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:network.NetworkRemoveRequest.name)
}
inline std::string* NetworkRemoveRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:network.NetworkRemoveRequest.name)
  return _internal_mutable_name();
}
inline const std::string& NetworkRemoveRequest::_internal_name() const {
  return name_.Get();
}
inline void NetworkRemoveRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkRemoveRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkRemoveRequest.name)
}
inline void NetworkRemoveRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkRemoveRequest.name)
}
inline void NetworkRemoveRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkRemoveRequest.name)
}
inline std::string* NetworkRemoveRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkRemoveRequest::release_name() {
  // @@protoc_insertion_point(field_release:network.NetworkRemoveRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkRemoveRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkRemoveRequest.name)
}

// -------------------------------------------------------------------

// NetworkRemoveResponse

// string name = 1;
inline void NetworkRemoveResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NetworkRemoveResponse::name() const {
  // @@protoc_insertion_point(field_get:network.NetworkRemoveResponse.name)
  return _internal_name();
}
inline void NetworkRemoveResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:network.NetworkRemoveResponse.name)
}
inline std::string* NetworkRemoveResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:network.NetworkRemoveResponse.name)
  return _internal_mutable_name();
}
inline const std::string& NetworkRemoveResponse::_internal_name() const {
  return name_.Get();
}
inline void NetworkRemoveResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkRemoveResponse::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkRemoveResponse.name)
}
inline void NetworkRemoveResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkRemoveResponse.name)
}
inline void NetworkRemoveResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkRemoveResponse.name)
}
inline std::string* NetworkRemoveResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkRemoveResponse::release_name() {
  // @@protoc_insertion_point(field_release:network.NetworkRemoveResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkRemoveResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkRemoveResponse.name)
}

// uint32 cc = 2;
inline void NetworkRemoveResponse::clear_cc() {
  cc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkRemoveResponse::_internal_cc() const {
  return cc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkRemoveResponse::cc() const {
  // @@protoc_insertion_point(field_get:network.NetworkRemoveResponse.cc)
  return _internal_cc();
}
inline void NetworkRemoveResponse::_internal_set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cc_ = value;
}
inline void NetworkRemoveResponse::set_cc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cc(value);
  // @@protoc_insertion_point(field_set:network.NetworkRemoveResponse.cc)
}

// string errmsg = 3;
inline void NetworkRemoveResponse::clear_errmsg() {
  errmsg_.ClearToEmpty();
}
inline const std::string& NetworkRemoveResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:network.NetworkRemoveResponse.errmsg)
  return _internal_errmsg();
}
inline void NetworkRemoveResponse::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:network.NetworkRemoveResponse.errmsg)
}
inline std::string* NetworkRemoveResponse::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:network.NetworkRemoveResponse.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& NetworkRemoveResponse::_internal_errmsg() const {
  return errmsg_.Get();
}
inline void NetworkRemoveResponse::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkRemoveResponse::set_errmsg(std::string&& value) {
  
  errmsg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:network.NetworkRemoveResponse.errmsg)
}
inline void NetworkRemoveResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:network.NetworkRemoveResponse.errmsg)
}
inline void NetworkRemoveResponse::set_errmsg(const char* value,
    size_t size) {
  
  errmsg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:network.NetworkRemoveResponse.errmsg)
}
inline std::string* NetworkRemoveResponse::_internal_mutable_errmsg() {
  
  return errmsg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkRemoveResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:network.NetworkRemoveResponse.errmsg)
  return errmsg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkRemoveResponse::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:network.NetworkRemoveResponse.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_network_2eproto
